"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = __importDefault(require("../middlewares/auth"));
const service_ticket_history_1 = __importDefault(require("../middlewares/service-ticket-history"));
const serviceTicketController_1 = require("../controllers/serviceTicketController");
const router = (0, express_1.Router)();
router.get('/', auth_1.default, serviceTicketController_1.getServiceTickets);
router.get('/generate', auth_1.default, serviceTicketController_1.getGeneratedTicketNo);
router.get('/requested', auth_1.default, serviceTicketController_1.getRequestedServiceTickets);
router.get('/assigned', auth_1.default, serviceTicketController_1.getAssignedServiceTickets);
router.get('/assigned-closed', auth_1.default, serviceTicketController_1.getAssignedClosedServiceTickets);
router.get('/search-ticket-no', auth_1.default, serviceTicketController_1.getSearchedTicketNo);
router.get('/total-service-status', auth_1.default, serviceTicketController_1.getTotalServiceStatuses);
router.get('/total-task-type', auth_1.default, serviceTicketController_1.getTotalTaskTypes);
router.get('/total-equipment-type', auth_1.default, serviceTicketController_1.getTotalEquipmentTypes);
router.get('/:serviceTicketId', auth_1.default, serviceTicketController_1.getServiceTicket);
router.post('/', auth_1.default, service_ticket_history_1.default, serviceTicketController_1.createServiceTicket);
router.put('/:serviceTicketId', auth_1.default, service_ticket_history_1.default, serviceTicketController_1.updateServiceTicket);
router.patch('/:serviceTicketId/input-findings', auth_1.default, service_ticket_history_1.default, serviceTicketController_1.inputFindings);
router.patch('/:serviceTicketId/service-rendered', auth_1.default, service_ticket_history_1.default, serviceTicketController_1.inputServiceRendered);
router.patch('/:serviceTicketId/update-service-status', auth_1.default, service_ticket_history_1.default, serviceTicketController_1.updateServiceStatus);
router.patch('/:serviceTicketId/assign-service-engineer', auth_1.default, service_ticket_history_1.default, serviceTicketController_1.assignServiceEngineer);
router.patch('/:serviceTicketId/escalate-service', auth_1.default, service_ticket_history_1.default, serviceTicketController_1.escalateService);
router.patch('/:serviceTicketId/set-rating', auth_1.default, service_ticket_history_1.default, serviceTicketController_1.setServiceRating);
router.patch('/:serviceTicketId/close-ticket', auth_1.default, service_ticket_history_1.default, serviceTicketController_1.closeTicket);
router.delete('/:serviceTicketId', auth_1.default, serviceTicketController_1.removeServiceTicket);
exports.default = router;
